opcache.enable=1
opcache.enable.cli=1
opcache.memory_consumption=256
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=20000
opcache.validate_timestamps=1
opcache.revalidate_freq=2
opcache.fast_shutdown=1
opcache.save_comments=1


services:

  server:
        build:
            context: .
            dockerfile: ./automation/docker/Dockerfile
        container_name: server
        volumes:
            - ./:/var/www
        networks:
            - MyNetwork    
        links:
            - mysql
        ports:
            - 81:80
        #environment:
 #           DATABASE_URL: "mysql://${MYSQL_USER:-root}:${MYSQL_PASSWORD:-password}@mysql:3306/${MYSQL_DATABASE:-green_village}?serverVersion=8.2&charset=utf8mb4"
  #          MYSQL_USER: root
           # MYSQL_ALLOW_EMPTY_ROOT_PASSWORD: yes
   #         MYSQL_DATABASE: green_village
            #PHP_OPCACHE_VALIDATE_TIMESTAMPS: 1

  mysql:
    image: mysql:8.2
    container_name: mysql
    restart: always
    environment:
#        MYSQL_USER: root
#        MYSQL_PASSWORD: Afpa
        MYSQL_DATABASE: green_village
        MYSQL_ALLOW_EMPTY_ROOT_PASSWORD: 'yes'
        MYSQL_ROOT_PASSWORD: password
        MAILER_DSN: smtp://mailhog:1025
    # healthcheck:
    #     test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
    #     timeout: 5s
    #     retries: 5
    #     start_period: 60s
    # volumes:
    #   - mysql_data:/var/lib/mysql/data
    networks:
      - MyNetwork 
    ports:
      - 3307:3306

  database:
    image: postgres:-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ChangeMe}
      POSTGRES_USER: ${POSTGRES_USER:-ChangeMe}
    volumes:
      - db-data:/var/lib/postgresql/data:rw 

#   database:
#         image: mysql:8.2
#         container_name: database
#         restart: always
#         environment:
#           DATABASE_URL: "mysql://${MYSQL_USER:-root}:${MYSQL_PASSWORD:-password}@mysql:3306/${MYSQL_DATABASE:-green_village}?serverVersion=8.2&charset=utf8mb4"
#           MYSQL_USER: root
# #         MYSQL_PASSWORD: Afpa
#           MYSQL_DATABASE: green_village
#           ALLOW_EMPTY_ROOT_PASSWORD: 'yes'
#     #      MYSQL_ROOT_PASSWORD: password
#         networks:
#           - MyNetwork 
#         ports:
#           - '3306'
           
  
  phpmyadmin:
          image: phpmyadmin/phpmyadmin
          container_name: phpmyadmin
          depends_on:
             - mysql
          restart: always
          environment:
             PMA_HOST: mysql
            #  PMA_USER: admin
            #  PMA_PASSWORD: Afpa1234
            # MYSQL_ROOT_PASSWORD: password
          links:
              - mysql
          networks:
              - MyNetwork 
          ports:
              - 8090:80

  mailhog:
          image: mailhog/mailhog
          ports:
              - 1025:1025
              - 8025:8025          
              
networks:
    MyNetwork: 
         driver: bridge

###< doctrine/doctrine-bundle ###
volumes:
###> doctrine/doctrine-bundle ###
  db-data:
###< doctrine/doctrine-bundle ###
  
#version: '3'
services:
    database:
        image: 'postgres:alpine'
        environment:
            POSTGRES_PASSWORD: main
            POSTGRES_USER: main
            POSTGRES_DB: main
        ports:
            # To allow the host machine to access the ports below, modify the lines below.
            # For example, to allow the host to connect to port 3306 on the container, you would change
            # "3306" to "3306:3306". Where the first port is exposed to the host and the second is the container port.
            # See https://docs.docker.com/compose/compose-file/compose-file-v3/#ports for more information.
            - '5432'
###< doctrine/doctrine-bundle ###